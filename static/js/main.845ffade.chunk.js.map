{"version":3,"sources":["ArticleCard.js","asyncLoad.js","App.js","serviceWorker.js","index.js"],"names":["Article","className","parseInt","this","props","item","score","target","rel","href","canonical_url","title","number_of_tweets","date_published","split","site_type","toUpperCase","React","Component","AsyncHooks","useState","search","setSearch","query","setQuery","results","setResults","loading","setLoading","useEffect","a","fetch","method","headers","response","json","console","log","articles","fetchData","useGiphy","onChange","e","value","name","type","autoComplete","required","onKeyPress","event","which","shiftKey","htmlFor","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oSAEqBA,E,uKAEjB,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,OAAf,UAA6BC,SAASC,KAAKC,MAAMC,KAAKC,QACtD,uBACEC,OAAO,SACPC,IAAI,sBACJP,UAAU,eACVQ,KAAMN,KAAKC,MAAMC,KAAKK,eAEtB,6BACE,4BAAKP,KAAKC,MAAMC,KAAKM,OACrB,gDAAsBR,KAAKC,MAAMC,KAAKO,kBACtC,yBAAKX,UAAU,QACZE,KAAKC,MAAMC,KAAKQ,eAAeC,MAAM,KAAK,IAE7C,yBAAKb,UAAU,QACb,yBAAKA,UAAU,OACZE,KAAKC,MAAMC,KAAKU,UAAUC,uB,GAnBNC,IAAMC,WCmC5B,SAASC,IAAc,IAAD,EACPC,mBAAS,IADF,mBAC5BC,EAD4B,KACpBC,EADoB,OAETF,mBAAS,IAFA,mBAE5BG,EAF4B,KAErBC,EAFqB,OAnCrC,SAAkBD,GAAQ,IAAD,EACOH,mBAAS,IADhB,mBAChBK,EADgB,KACPC,EADO,OAEON,oBAAS,GAFhB,mBAEhBO,EAFgB,KAEPC,EAFO,KAgCvB,OA5BAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEAEIF,GAAW,GAFf,SAG2BG,MAAM,2FAAD,OACiER,GAC3F,CACES,OAAQ,MACRC,QAAS,CACP,kBAAmB,2BACnB,iBACE,wDAVZ,cAGUC,EAHV,gBAcuBA,EAASC,OAdhC,OAcUA,EAdV,OAeIC,QAAQC,IAAIF,EAAKG,UACjBZ,EAAWS,EAAKG,UAhBpB,yBAkBIV,GAAW,GAlBf,4EADc,sBAuBA,KAAVL,GAvBW,WAAD,wBAwBZgB,KAED,CAAChB,IAEG,CAACE,EAASE,GAMUa,CAASjB,GAHD,mBAG5BE,EAH4B,KAGnBE,EAHmB,KAWnC,OACE,oCACE,yBAAK1B,UAAU,QACb,2BACEwC,SAAU,SAACC,GAAD,OAAOpB,EAAUoB,EAAEnC,OAAOoC,QACpCC,KAAK,SACLC,KAAK,OACLF,MAAOtB,EACPyB,aAAa,MACbC,UAAQ,EACRC,WAhBS,SAACC,GACI,KAAhBA,EAAMC,OAAiBD,EAAME,UAC/B3B,EAASH,MAgBP,2BAAOpB,UAAU,aAAamD,QAAQ,UACpC,0BAAMnD,UAAU,gBAAhB,YAGJ,6BAASA,UAAU,qBAQhB0B,EACC,0CAEAF,EAAQ4B,KAAI,SAAChD,GAAD,OAAU,kBAAC,EAAD,CAASA,KAAMA,S,MCvDhCiD,MAhBf,WACE,OACE,yBAAKrD,UAAU,QACb,4BACE,uBAAGA,UAAU,gCADf,kCAIA,oGAGA,yDACA,kBAACkB,EAAD,QCHcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.845ffade.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Article extends React.Component {\n  render() {\n    return (\n      <div className=\"card-grid-space\">\n        <div className=\"num\">Score: {parseInt(this.props.item.score)}</div>\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"article-card\"\n          href={this.props.item.canonical_url}\n        >\n          <div>\n            <h1>{this.props.item.title}</h1>\n            <p>Number of Tweets: {this.props.item.number_of_tweets}</p>\n            <div className=\"date\">\n              {this.props.item.date_published.split(\"T\")[0]}\n            </div>\n            <div className=\"tags\">\n              <div className=\"tag\">\n                {this.props.item.site_type.toUpperCase()}\n              </div>\n            </div>\n          </div>\n        </a>\n      </div>\n    );\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport Article from \"./ArticleCard\";\nfunction useGiphy(query) {\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setLoading(true);\n        const response = await fetch(\n          `https://api-hoaxy.p.rapidapi.com/articles?sort_by=relevant&use_lucene_syntax=true&query=${query}`,\n          {\n            method: \"GET\",\n            headers: {\n              \"x-rapidapi-host\": \"api-hoaxy.p.rapidapi.com\",\n              \"x-rapidapi-key\":\n                \"5205c32fa5mshca9ad07b3dd74ccp18bbedjsnb96ddfde337e\",\n            },\n          }\n        );\n        const json = await response.json();\n        console.log(json.articles);\n        setResults(json.articles);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    if (query !== \"\") {\n      fetchData();\n    }\n  }, [query]);\n\n  return [results, loading];\n}\n\nexport default function AsyncHooks() {\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [results, loading] = useGiphy(query);\n\n  const onSubmit = (event) => {\n    if (event.which === 13 && !event.shiftKey) {\n      setQuery(search);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"form\">\n        <input\n          onChange={(e) => setSearch(e.target.value)}\n          name=\"search\"\n          type=\"text\"\n          value={search}\n          autoComplete=\"off\"\n          required\n          onKeyPress={onSubmit}\n        ></input>\n        <label className=\"label-name\" htmlFor=\"search\">\n          <span className=\"content-name\">Search</span>\n        </label>\n      </div>\n      <section className=\"sources-container\">\n        {/* <Article\n          item={{\n            title: \"Lovely Day for an Egg\",\n            canonical_url: \"https://www.jackparker.dev\",\n            score: 52,\n          }}\n        /> */}\n        {loading ? (\n          <h1>Loading...</h1>\n        ) : (\n          results.map((item) => <Article item={item} />)\n        )}\n      </section>\n    </>\n  );\n}\n","import React from \"react\";\nimport AsyncHooks from \"./asyncLoad\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"info\">\n      <h1>\n        <i className=\"fab fa-twitter twitter-icon\"></i>Tweet Source Fact Check\n        Helper\n      </h1>\n      <header>\n        Copy and paste Tweets in the Search Bar to find related articles\n      </header>\n      <header>Press Enter to Search</header>\n      <AsyncHooks />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}